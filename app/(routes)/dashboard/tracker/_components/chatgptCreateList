/**'use client'
import React, { useEffect, useState } from 'react'
import {
    Dialog,
    DialogClose,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog"
import EmojiPicker from 'emoji-picker-react'
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { firestore } from '@/firebase'
import { collection, deleteDoc, doc, getDocs, query, getDoc, setDoc } from "firebase/firestore";

function CreateList() {
    const [emojiIcon, setEmojiIcon] = useState('ðŸ§º');
    const [openEmojiPicker, setOpenEmojiPicker] = useState(false);
    const [itemName, setItemName] = useState('');
    const [quantity, setQuantity] = useState(0);
    const [documentName, setDocumentName] = useState('');

    const [inventory, setInventory] = useState([]);
    const [open, setOpen] = useState(false);
    const [currentDoc, setCurrentDoc] = useState(null);

    const updateInventory = async () => {
        const snapshot = query(collection(firestore, 'inventory'));
        const docs = await getDocs(snapshot);
        const inventoryList = [];
        if (!docs.empty) {
            docs.forEach((doc) => {
                inventoryList.push({
                    name: doc.id,
                    ...doc.data(),
                });
            });
        }
        setInventory(inventoryList);
    }

    const createDocument = async () => {
        const capitalizedDocName = capitalizeFirstLetter(documentName);
        const docRef = doc(collection(firestore, 'inventory'), capitalizedDocName);
        const docSnap = await getDoc(docRef);

        if (!docSnap.exists()) {
            await setDoc(docRef, { name: capitalizedDocName });
        }

        setCurrentDoc(capitalizedDocName); // Set the current document for further actions
        setDocumentName(''); // Clear input after creating document
    }

    const addItem = async (subItem) => {
        if (!currentDoc) return;

        const docRef = doc(collection(firestore, 'inventory'), currentDoc);
        const subCollectionRef = collection(docRef, 'subitems');
        const subDocRef = doc(subCollectionRef, subItem);
        const subDocSnap = await getDoc(subDocRef);

        const parsedQuantity = parseInt(quantity, 10);

        if (subDocSnap.exists()) {
            const { quantity: existingQuantity } = subDocSnap.data();
            await setDoc(subDocRef, { name: subItem, quantity: existingQuantity + parsedQuantity }, { merge: true });
        } else {
            await setDoc(subDocRef, { name: subItem, quantity: parsedQuantity });
        }

        await updateInventory();
        setItemName('');
        setQuantity(0);
    }

    useEffect(() => {
        updateInventory();
    }, []);

    const capitalizeFirstLetter = (string) => {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    return (
        <div>
            <div className='flex flex-col items-center'>
                <Input
                    placeholder="Enter Document Name"
                    value={documentName}
                    onChange={(e) => setDocumentName(e.target.value)}
                    className="mb-2"
                />
                <Button onClick={createDocument} className="mb-5 w-full bg-blue-600">
                    Create Document
                </Button>
            </div>
            {currentDoc && (
                <Dialog>
                    <DialogTrigger asChild>
                        <div className='bg-slate-100 p-10 rounded-md
                            items-center flex flex-col border-2 border-dashed
                            cursor-pointer hover:shadow-md'>
                            <h2 className='text-3xl'>+</h2>
                            <h2>Add Item to {currentDoc}</h2>
                        </div>
                    </DialogTrigger>
                    <DialogContent>
                        <DialogHeader>
                            <DialogTitle>Add Item to {currentDoc}</DialogTitle>
                            <DialogDescription>
                                <div className='mt-3'>
                                    <Button variant="outline"
                                        className="text-lg"
                                        onClick={() => setOpenEmojiPicker(!openEmojiPicker)}>
                                        {emojiIcon}
                                    </Button>
                                    {openEmojiPicker && (
                                        <div className='absolute z-10'>
                                            <EmojiPicker
                                                onEmojiClick={(e) => {
                                                    setEmojiIcon(e.emoji);
                                                    setOpenEmojiPicker(false);
                                                }}
                                            />
                                        </div>
                                    )}
                                    <div className='mt-2'>
                                        <h2 className='text-black font-medium my-1'>Subitem Name</h2>
                                        <Input
                                            placeholder="e.g. Carrots"
                                            value={itemName}
                                            onChange={(e) => setItemName(capitalizeFirstLetter(e.target.value))}
                                        />
                                    </div>
                                    <div className='mt-2'>
                                        <h2 className='text-black font-medium my-1'>Quantity</h2>
                                        <Input
                                            type='number'
                                            placeholder="e.g. 1"
                                            min="0"
                                            value={quantity}
                                            onChange={(e) => {
                                                const value = parseInt(e.target.value, 10);
                                                if (!isNaN(value) && value >= 0) {
                                                    setQuantity(value);
                                                } else {
                                                    setQuantity(0);
                                                }
                                            }}
                                        />
                                    </div>
                                </div>
                            </DialogDescription>
                        </DialogHeader>
                        <DialogFooter className="sm:justify-start">
                            <Button
                                disabled={!(itemName && quantity)}
                                onClick={() => addItem(itemName)}
                                className="mt-5 w-full bg-green-600">
                                Add
                            </Button>
                        </DialogFooter>
                    </DialogContent>
                </Dialog>
            )}
            <div className='mt-5'>
                <h2 className='text-2xl'>Existing Documents</h2>
                <div className='flex flex-wrap'>
                    {inventory.map((doc) => (
                        <div
                            key={doc.name}
                            className='bg-slate-100 p-4 m-2 rounded-md cursor-pointer'
                            onClick={() => setCurrentDoc(doc.name)}>
                            {doc.name}
                        </div>
                    ))}
                </div>
            </div>
        </div>
    )
}

export default CreateList
---------------------------------------------------------------------------------------------------------
const addSubItem = async (subItem) => {
        if (!category) return;
        console.log("Inside function addSubItem")
        const docRef = doc(collection(firestore, 'inventory'), category);
        const subCollectionRef = collection(docRef, 'items');
        const subDocRef = doc(subCollectionRef, subItem);
        const subDocSnap = await getDoc(subDocRef);

        const parsedQuantity = parseInt(quantity, 10);

        if (subDocSnap.exists()) {
            const { quantity: existingQuantity } = subDocSnap.data();
            await setDoc(subDocRef, { name: subItem, quantity: existingQuantity + parsedQuantity });
        } else {
            await setDoc(subDocRef, { name: subItem, quantity: parsedQuantity });
        }
        refreshData()
        //await updateInventory();
        setItemName('');
        setQuantity('');
    }



"use client";
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { firestore } from '@/firebase';
import { collection, getDocs } from 'firebase/firestore';

function Items({ params }) {
  const router = useRouter();
  const { id } = router.query;

  const [items, setItems] = useState([]);

  useEffect(() => {
    if (id) {
      getCategoryItems(id);
    }
  }, [id]);

  const getCategoryItems = async (categoryId) => {
    const subCollectionRef = collection(firestore, 'inventory', categoryId, 'Items');
    const subCollectionSnapshot = await getDocs(subCollectionRef);

    const itemList = subCollectionSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    setItems(itemList);
  };

  return (
    <div className='p-10'>
      <h2 className='text-2xl font-bold'>Items in {id}</h2>
      <ul>
        {items.map(item => (
          <li key={item.id}>
            {item.name} - Quantity: {item.quantity}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Items;

  const getCategoryItems = async () => {
    const subCollectionRef = collection(firestore, 'inventory', decodedId, 'items');
    const subCollectionSnapshot = await getDocs(subCollectionRef);

    const itemList = subCollectionSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    setItems(itemList);
  };


        <h2 className='font-bold text-lg'>Add Items</h2>
        <div className='mt-2'>
            <h2 className='text-black font-medium my-1'>Product Name</h2>
            <Input 
                placeholder="e.g. Apple" 
                value={item}
                onChange={(e) => setItemName(e.target.value)}/>
        </div>
        <div className='mt-2'>
            <h2 className='text-black font-medium my-1'>Quantity</h2>
            <Input 
                type='number'
                placeholder="e.g. 1"
                min= '0'
                value={quantity}
                onChange={(e) => {
                    const value = e.target.value;
                        setQuantity(value);
                    /*const value = parseInt(e.target.value, 10);
                    if (!isNaN(value) && value >= 0) {
                        setQuantity(value);
                    } else {
                        setQuantity(0);
                    }
                    //setQuantity(parseInt(e.target.value, 10))
                />
                </div>
                <Button 
                      disabled={!(item&&quantity)}
                      onClick= {() => addSubItem(item)}
                      className="mt-5 w-full bg-green-600">Add</Button>

                      const addSubItem = async (subItem) => {
        if (!currentDoc) return;

        const docRef = doc(collection(firestore, 'inventory'), currentDoc);
        const subCollectionRef = collection(docRef, 'items');
        const subDocRef = doc(subCollectionRef, subItem);
        const subDocSnap = await getDoc(subDocRef);

        const parsedQuantity = parseInt(quantity, 10);

        if (subDocSnap.exists()) {
            const { quantity: existingQuantity } = subDocSnap.data();
            await setDoc(subDocRef, { name: subItem, quantity: existingQuantity + parsedQuantity });
        } else {
            await setDoc(subDocRef, { name: subItem, quantity: parsedQuantity });
        }

        await updateInventory();
        setItemName('');
        setQuantity(0);
    }
    const addItem = async (item) =>{
        const docRef = doc(collection(firestore, 'inventory'), item);
        const docSnap = await getDoc(docRef);

        const parsedQuantity = parseInt(quantity, 10);

        if (docSnap.exists()) {
            const { quantity: existingQuantity } = docSnap.data();
            await setDoc(docRef, { quantity: existingQuantity + parsedQuantity });
        } else {
            await setDoc(docRef, { quantity: parsedQuantity });
        }
        
        toast('New Product Added!');
        await updateInventory();
        
        setItemName('');  // Reset item name
        setQuantity(0);   // Reset quantity
    }
  
*/
